#pragma checksum "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "31e22e06472c6f5ecd404ffb94b345c919ec0152"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Expense_Index), @"mvc.1.0.view", @"/Views/Expense/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\_ViewImports.cshtml"
using Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\_ViewImports.cshtml"
using Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"31e22e06472c6f5ecd404ffb94b345c919ec0152", @"/Views/Expense/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"74b0619e1a302f0598271da1847e697c39d57b88", @"/Views/_ViewImports.cshtml")]
    public class Views_Expense_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Services.ExpenseManager.VmExpense>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
  
    ViewData["Title"] = "Expense";
    var today = DateTime.Now.ToString("dd/MM/yyyy");


#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
 if (TempData["AddSuccessMessage"] != null)
{

#line default
#line hidden
#nullable disable
            WriteLiteral("    <div class=\"alert alert-success\" id=\"success-alert\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">x</button>\r\n        <strong>");
#nullable restore
#line 11 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
           Write(TempData["AddSuccessMessage"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>\r\n    </div>\r\n");
#nullable restore
#line 13 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
}

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
 if (TempData["SuccessMessage"] != null)
{

#line default
#line hidden
#nullable disable
            WriteLiteral("    <div class=\"alert alert-info\" id=\"success-alert\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">x</button>\r\n        <strong>");
#nullable restore
#line 18 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
           Write(TempData["SuccessMessage"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>\r\n    </div>\r\n");
#nullable restore
#line 20 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
}

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
 if (TempData["NotUniqueMessage"] != null)
{

#line default
#line hidden
#nullable disable
            WriteLiteral("    <div class=\"alert alert-danger\" id=\"success-alert\">\r\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\">x</button>\r\n        <strong>");
#nullable restore
#line 25 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
           Write(TempData["NotUniqueMessage"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("</strong>\r\n    </div>\r\n");
#nullable restore
#line 27 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
}

#line default
#line hidden
#nullable disable
            WriteLiteral("<div class=\"modal fade\" id=\"ExpenseModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n    <div class=\"modal-dialog modal-lg\" role=\"document\">\r\n        <div class=\"modal-content\">\r\n");
#nullable restore
#line 31 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
             using (Html.BeginForm("AddorUpdate", "Expense", FormMethod.Post, new { @id = "mainForm", enctype = "multipart/form-data", onSubmit = "return ValidateFormData()" }))
            {
                

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
           Write(Html.AntiForgeryToken());

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
           Write(Html.ValidationSummary(true, "", new { @class = "text-danger" }));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"                <input type=""hidden"" name=""Id"" id=""Id"" class=""form-control"" value=""0"" />
                <div class=""modal-header"">
                    <h5 class=""modal-Name"" id=""AddorEditModalHeader""></h5>
                    <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                        <span aria-hidden=""true"">&times;</span>
                    </button>
                </div>
                <div class=""modal-body"">
                    <div class=""row"">
                        <div class=""col-sm-6"">
                            <label class=""mt-3"">
                                Date <sup class=""text-danger"">*</sup><br /><small>
                                    Date of the Expense
                                </small>
                            </label>
                            <label>Date</label><br>
                            <input type=""text"" name=""Date"" id=""Date"" class=""form-control form-padding"" placeholder=""DD/MM/YYYY""");
            BeginWriteAttribute("value", " value=\"", 2428, "\"", 2442, 1);
#nullable restore
#line 51 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
WriteAttributeValue("", 2436, today, 2436, 6, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(@" />
                            <span id=""spnDate"" class=""text-danger""></span>
                        </div>
                        <div class=""col-sm-6"">
                            <label class=""mt-3"">
                                Expense Category <sup class=""text-danger"">*</sup><br /><small>
                                  Category of the Expense
                            </small>
                            </label>
                            ");
#nullable restore
#line 60 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
                       Write(Html.DropDownList("ExpenseCategoryId", new SelectList(ViewBag.ExppenseCategoryList, "Id", "Name"), "Select", new { @class = "form-control form-padding", id = "ExpenseCategoryId", value="0" }));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
                            <span id=""spnExpenseCategoryId"" class=""text-danger""></span>
                        </div>
                        <div class=""col-sm-12"">
                            <label class=""mt-3"">
                                Amount <sup class=""text-danger"">*</sup><br /><small>
    Expense Amount in BDT
</small>
                            </label>
                            <input type=""number"" name=""Ammount"" id=""Ammount"" class=""form-control"" />
                            <span class=""text-danger"" id=""spnAmmount""></span>
                        </div>
                    </div>
                </div>
                <div class=""modal-footer"">
                    <button type=""button"" class=""btn btn-secondary"" data-dismiss=""modal"">Close</button>
                    <button type=""submit"" class=""btn btn-primary"" id=""save"">Save changes</button>
                </div>
");
#nullable restore
#line 78 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
            }

#line default
#line hidden
#nullable disable
            WriteLiteral("        </div>\r\n    </div>\r\n</div>\r\n<!--Header Section-->\r\n<div class=\"content-header\">\r\n    <div class=\"container-fluid\">\r\n        <div class=\"row mb-2\">\r\n            <div class=\"col-sm-6\">\r\n                <h1 class=\"m-0 text-dark\">");
#nullable restore
#line 87 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
                                     Write(ViewBag.Name);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</h1>
            </div><!-- /.col -->
            <div class=""col-sm-6 text-right"">
                <a class=""btn bg-blue"" data-toggle=""modal"" data-target=""#ExpenseModal"">
                    <i class=""fa fa-plus-square""></i>
                    Add new
                </a>
            </div>
        </div>
    </div>
</div>


<section class=""content"">
    <div class=""container-fluid"">
        <div class=""card collapsed-card"">
            <div class=""card-header border-transparent"">
                <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"">
                    <h3 class=""card-title""><i class=""fas fa-search""></i> &nbsp;Search</h3>
                </button>

");
            WriteLiteral(@"                <div class=""card-tools"">
                    <button type=""button"" class=""btn btn-tool"" data-card-widget=""collapse"">
                        <i class=""fas fa-minus""></i>
                    </button>
                    <button type=""button"" class=""btn btn-tool"" data-card-widget=""remove"">
                        <i class=""fas fa-times""></i>
                    </button>
                </div>
            </div>
            <!-- /.card-header -->
            <div class=""card-body p-0 scrollable-height-150"">
                <div class=""container"">
                    <div class=""row mt-2"">
                        <div class=""col-sm-4"">
                            <!-- Date and time range -->
                            <div class=""form-group"">
                                <label>Date</label>
                                <input type=""text"" class=""d-none"" id=""FromDate"" />
                                <input type=""text"" class=""d-none"" id=""ToDate"" />
                     ");
            WriteLiteral(@"           <div class=""input-group"">
                                    <button type=""button"" class=""btn btn-default pull-right"" id=""daterange-btn"">
                                        <span id=""dummyDateRangeValue"">
                                            <i class=""fa fa-calendar""></i> Search by date
                                        </span>
                                        <i class=""fa fa-caret-down""></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""card-footer clearfix"">

                <a href=""javascript:void(0)"" id=""search"" class=""btn btn-sm btn-info float-right"">Search</a>
            </div>
        </div>

        <div class=""card"">
            <div class=""card-header"">
                <h3 class=""card-Name"">Existing Expense</h3>
            </div>
            <");
            WriteLiteral(@"div class=""card-body pb-0"">
                <span id=""exportButtons"" class=""text-right""></span>
            </div>
            <div class=""card-body"">
                <table id=""dataTable"" class=""table table-bordered table-striped"">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Category</th>
                            <th>Amount</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</section>

");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        var oTable;
        $(document).ready(function () {
            //alert & modal
            $(""#success-alert"").fadeTo(2000, 500).slideUp(500, function () {
                $(""#success-alert"").slideUp(500);
            });
            $('#AddorEditModalHeader').text('Add New Expense');

            //date
            $(function () {
                $('#Date').datepicker({
                    autoclose: true,
                    format: 'dd/mm/yyyy'
                }).on('changeDate', function (e) {
                    selectedDate = new Date(e.date.valueOf());
                    $('#Date').val(selectedDate);
                });
            });

            //datatable
            oTable = $('#dataTable').DataTable({
                ""lengthMenu"": [[25, 50, 100], [25, 50, 100]],
                ""pageLength"": 50,
                ""processing"": true,
                ""serverSide"": false,
                ""ajax"": {
                    url: ""/Expense/AjaxDataList"",
 ");
                WriteLiteral(@"                   ""data"": function (d) {
                        d.FromDate = $(""#FromDate"").val()
                        d.ToDate = $(""#ToDate"").val()
                    },
                },
                ""columns"": [
                    { ""data"": ""date"" },
                    { ""data"": ""expenseCategoryName"" },
                    { ""data"": ""ammount"" },
                    {
                        ""Name"": ""Action"",
                        ""render"": function (data, type, row, meta) {
                            var id = row.id;
                            return '<a href=""javascript:void(0)"" onclick=""GetData(' + id + ')""><i class=""mr-2 text-info far fa-edit""></i></a><a href=""javascript:void(0)"" onclick=""DeleteConfirm(this)"" HeaderId=""' + id + '"" class=""delete""><i class=""text-danger far fa-trash-alt""></i></a>';
                        }
                    }
                ]
            });
        });

        //Validation
        function ValidateFormData() {
            $('#sav");
                WriteLiteral(@"e').prop('disabled', true);
            isValid = true;

            //values
            debugger
            var ExpenseCategoryId = parseInt($('#ExpenseCategoryId').val());
            var Date = $('#Date').val().split('/');
            var FormattedDate = Date[2] + '-' + Date[0] + '-' + Date[1];

            var Ammount = parseInt($('#Ammount').val());
            var Today = ('");
#nullable restore
#line 231 "D:\File.Repository\Locker\Personal\Expense-Tracker\src\Web\Views\Expense\Index.cshtml"
                     Write(today);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"').split('/');
            var FormattedToday = Today[2] + '-' + Today[0] + '-' + Today[1];
            debugger
            //validation msg
            $('#spnExpenseCategoryId').hide();
            $('#spnDate').hide();
            $('#spnAmmount').hide();

            if (FormattedDate > FormattedToday) {
                $('#spnDate').text(""Not Allowed to record future expense"");
                $('#spnDate').show();
                isValid = false;
            }

            if (Ammount < 1 || Ammount == NaN) {
                $('#spnName').text(""Please try with a valid amount"");
                $('#spnName').show();
                isValid = false;
            }

            if (ExpenseCategoryId < 1 || ExpenseCategoryId == """") {
                $('#spnName').text(""Please try with a valid amount"");
                $('#spnName').show();
                isValid = false;
            }
            if (isValid == false) {
                $('#save').prop('disabled', false);
        ");
                WriteLiteral(@"    }
            return isValid;
        }

        $(""#Ammount"").keypress(function () {
            $(""#spnAmmount"").hide();
        });

        //reset modal
        $('#ExpenseModal').on('hidden.bs.modal', function () {
            $(this).find('form').trigger('reset');
            $('#AddorEditModalHeader').text('Add New Expense');
        })
        //reset modal

        //get data to edit
        function GetData(id) {
            $.ajax({
                url: ""/Expense/Get/"" + id,
                type: ""GET"",
                contentType: ""application/json;charset=UTF-8"",
                datatype: ""json"",
                success: function (response) {
                    $('#Id').val(response.id);
                    $('#ExpenseCategoryId').val(response.expenseCategoryId);
                    $('#Date').val(response.date);
                    $('#Ammount').val(response.ammount);
                    $('#AddorEditModalHeader').text('Edit Expense');
                    $('#Ex");
                WriteLiteral(@"penseModal').modal('show');
                }
            });
        }
        //edit data

        //delete confirmation
        var id;
        function DeleteConfirm(elem) {
            id = $(elem).attr(""HeaderId"");
            Swal.fire({
                Name: 'Think Again. Are you sure you want to delete this',
                text: ""Once delete, you won't be able to revert this!"",
                icon: 'warning',
                showCancelButton: true,
                cancelButtonColor: '#d33',
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.value) {
                    //undo delete
                    let timerInterval
                    Swal.fire({
                        Name: 'Deleting! Want to Cancel Deleting?',
                        html: 'It will take <b></b> milliseconds to delete.',
                        timer: 1000,
                        timerProg");
                WriteLiteral(@"ressBar: true,
                        showCancelButton: true,
                        cancelButtonColor: '#d33',
                        onBeforeOpen: () => {
                            Swal.showLoading()
                            timerInterval = setInterval(() => {
                                const content = Swal.getContent()
                                if (content) {
                                    const b = content.querySelector('b')
                                    if (b) {
                                        b.textContent = Swal.getTimerLeft()
                                    }
                                }
                            }, 100)
                        },
                        onClose: () => {
                            clearInterval(timerInterval)
                        }
                    }).then((result) => {
                        if (result.dismiss === Swal.DismissReason.timer) {
                            //delete
            ");
                WriteLiteral(@"                $.get(""/Expense/Delete/"" + id, function (data) {
                                RowId = 0;
                                if (!data || typeof data === 'undefined') {
                                    Swal.fire({
                                        type: 'error',
                                        position: 'center',
                                        text: 'Something Wrong, Delete Related Data & Try again...!!!',
                                        showConfirmButton: false,
                                        timer: 2000
                                    });
                                }
                                else {
                                    Swal.fire({
                                        position: 'center',
                                        type: 'success',
                                        text: 'Deleted Successfully!',
                                        showConfirmButton: false,
                       ");
                WriteLiteral(@"                 timer: 2000
                                    });
                                }
                                setTimeout(function () {
                                    oTable.ajax.reload();
                                }, 2300)
                                $('#DeleteConfirmation').modal('hide');
                            });
                        }
                    })
                }
            });
        }

        //filter
        $(""#search"").click(function () {
            var pickdate = $(""#dummyDateRangeValue"").text();
            var data = $(""#dummyDateRangeValue"").find(""i"");

            if (data.length == 0) {
                var dateArr = pickdate.split('-');

                var fromDateSplit = dateArr[0].trim().split(',');
                var formMonth = fromDateSplit[0].split(' ')[0].trim();
                var fromDate = fromDateSplit[0].split(' ')[1].trim();
                var fromYear = fromDateSplit[1].trim();


      ");
                WriteLiteral(@"          var toDateSplit = dateArr[1].trim().split(',');
                var toMonth = toDateSplit[0].split(' ')[0].trim();
                var toDate = toDateSplit[0].split(' ')[1].trim();
                var toYear = toDateSplit[1].trim();

                $(""#FromDate"").val(fromDate + ""/"" + MonthNumber(formMonth) + ""/"" + fromYear);
                $(""#ToDate"").val(toDate + ""/"" + MonthNumber(toMonth) + ""/"" + toYear);
            }
            oTable.ajax.reload();
        });

        function MonthNumber(name) {
            switch (name) {
                case ""January"":
                    return 1;
                    break;
                case ""February"":
                    return 2;
                    break;
                case ""March"":
                    return 3;
                    break;
                case ""April"":
                    return 4;
                    break;
                case ""May"":
                    return 5;
                    break;
        ");
                WriteLiteral(@"        case ""June"":
                    return 6;
                    break;
                case ""July"":
                    return 7;
                    break;
                case ""August"":
                    return 8;
                    break;
                case ""September"":
                    return 9;
                    break;
                case ""October"":
                    return 10;
                    break;
                case ""November"":
                    return 11;
                    break;
                case ""December"":
                    return 12;
                    break;
                default:
                // code to be executed if n is different from case 1 and 2
            }
        }


    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Services.ExpenseManager.VmExpense> Html { get; private set; }
    }
}
#pragma warning restore 1591
